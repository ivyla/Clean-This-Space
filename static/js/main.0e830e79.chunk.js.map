{"version":3,"sources":["components/Header.js","components/Sider.js","components/HomePage.js","components/MapPage.js","components/AboutPage.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","onClick","setCollapse","isCollapse","icon","src","Sider","trigger","collapsible","collapsedWidth","collapsed","Item","key","to","HomePage","handleClick","console","log","greatPlaceStyle","position","transform","Marker","style","MapPage","defaultProps","center","lat","lng","zoom","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","height","width","bootstrapURLKeys","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","AboutPage","Content","Layout","Footer","Radar","trackOnce","status","location","user","events","STATUS","SUCCESS","geofence","geofences","tag","App","useState","exact","path","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e830e79.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button, Layout, Menu } from 'antd'\r\n\r\nconst Header = props => {\r\n  return (\r\n    <Layout.Header className=\"header\">\r\n      <Button\r\n        onClick={() => props.setCollapse(!props.isCollapse)}\r\n        className=\"sider-toggle\"\r\n        icon={props.isCollapse ? 'menu-unfold' : 'menu-fold'}\r\n      ></Button>\r\n      <div className=\"logo\">\r\n        <h1>CLEAN THIS SPACE</h1>\r\n        <img src=\"https://img.icons8.com/cotton/64/000000/earth-care--v1.png\"></img>\r\n      </div>\r\n    </Layout.Header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { Layout, Menu, Icon } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Sider = props => {\r\n  return (\r\n    <Layout.Sider\r\n      className=\"sider\"\r\n      trigger={null}\r\n      collapsible\r\n      collapsedWidth={0}\r\n      collapsed={props.isCollapse}\r\n    >\r\n      <div className=\"sider-logo\">\r\n        <img src=\"https://img.icons8.com/cotton/128/000000/earth-care--v1.png\"></img>\r\n      </div>\r\n      <Menu>\r\n        <Menu.Item key=\"0\" onClick={() => props.setCollapse(!props.isCollapse)}>\r\n          <Link to=\"/\">\r\n            <h1>HOME</h1>\r\n          </Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"1\" onClick={() => props.setCollapse(!props.isCollapse)}>\r\n          <Link to=\"/about\">\r\n            <h1>ABOUT</h1>\r\n          </Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"2\" onClick={() => props.setCollapse(!props.isCollapse)}>\r\n          <Link to=\"/map\">\r\n            <h1>MAP</h1>\r\n          </Link>\r\n        </Menu.Item>\r\n      </Menu>\r\n    </Layout.Sider>\r\n  )\r\n}\r\n\r\nexport default Sider\r\n","import React from 'react'\r\n\r\nconst HomePage = () => {\r\n  return <h1>HOME PAGE</h1>\r\n}\r\n\r\nexport default HomePage\r\n","import React from 'react'\r\nimport GoogleMapReact from 'google-map-react'\r\n\r\nconst handleClick = () => {\r\n  console.log('hi')\r\n}\r\n\r\nconst greatPlaceStyle = {\r\n  position: 'absolute',\r\n  transform: 'translate(-50%, -100%)',\r\n}\r\n\r\nconst Marker = () => (\r\n  <img\r\n    style={greatPlaceStyle}\r\n    onClick={handleClick}\r\n    src=\"https://img.icons8.com/color/20/000000/marker.png\"\r\n  />\r\n)\r\n\r\nconst Markers = () => {\r\n  return [\r\n    <Marker lat={37.453639} lng={-122.445115} />,\r\n    <Marker lat={36.971454} lng={-121.952722} />,\r\n    <Marker lat={36.963261} lng={-122.009431} />,\r\n    <Marker lat={36.549343} lng={-121.929567} />,\r\n    <Marker lat={37.00413} lng={-122.185773} />,\r\n  ]\r\n}\r\n\r\nconst MapPage = () => {\r\n  const defaultProps = {\r\n    center: {\r\n      lat: 36.962043,\r\n      lng: -122.007636,\r\n    },\r\n    zoom: 13,\r\n  }\r\n  if (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition(position => {\r\n      defaultProps.center.lat = position.coords.latitude\r\n      defaultProps.center.lng = position.coords.longitude\r\n    })\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>MAP PAGE</h1>\r\n      <div style={{ height: '84vh', width: '100%' }}>\r\n        <GoogleMapReact\r\n          bootstrapURLKeys={{ key: 'AIzaSyDVbQIZYWFU5zfuxRW1Ogt-9GAnmuznuwc' }}\r\n          defaultCenter={defaultProps.center}\r\n          defaultZoom={defaultProps.zoom}\r\n          yesIWantToUseGoogleMapApiInternals\r\n        >\r\n          <Marker lat={37.453639} lng={-122.445115} />\r\n          <Marker lat={36.971454} lng={-121.952722} />\r\n          <Marker lat={36.963261} lng={-122.009431} />\r\n          <Marker lat={36.549343} lng={-121.929567} />\r\n          <Marker lat={37.00413} lng={-122.185773} />\r\n        </GoogleMapReact>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MapPage\r\n","import React from 'react'\r\n\r\nconst AboutPage = () => {\r\n  return <h1>ABOUT PAGE</h1>\r\n}\r\n\r\nexport default AboutPage\r\n","import React, { useState } from 'react'\r\nimport { Layout } from 'antd'\r\nimport Radar from 'radar-sdk-js'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\nimport Header from './components/Header'\r\nimport Sider from './components/Sider'\r\n\r\nimport HomePage from './components/HomePage'\r\nimport MapPage from './components/MapPage'\r\nimport AboutPage from './components/AboutPage'\r\n\r\nconst { Content, Footer } = Layout\r\n\r\nRadar.trackOnce((status, location, user, events) => {\r\n  if (status === Radar.STATUS.SUCCESS) {\r\n    for (const geofence in user.geofences) {\r\n      if (geofence.tag === 'stadium') {\r\n        // do something\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\nconst App = () => {\r\n  const [isCollapse, setCollapse] = useState(true)\r\n  return (\r\n    <Router>\r\n      <Layout className=\"layout\">\r\n        <Sider isCollapse={isCollapse} setCollapse={setCollapse}></Sider>\r\n        <Layout>\r\n          <Header\r\n            className=\"header\"\r\n            isCollapse={isCollapse}\r\n            setCollapse={setCollapse}\r\n          ></Header>\r\n          <Content className=\"content\">\r\n            <Switch>\r\n              <Route exact path=\"/\">\r\n                <HomePage />\r\n              </Route>\r\n              <Route path=\"/map\">\r\n                <MapPage />\r\n              </Route>\r\n              <Route path=\"/about\">\r\n                <AboutPage />\r\n              </Route>\r\n            </Switch>\r\n          </Content>\r\n          <Footer className=\"footer\"></Footer>\r\n        </Layout>\r\n      </Layout>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './App'\r\nimport 'antd/dist/antd.css'\r\nimport './assets/styles/index.scss'\r\n\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}