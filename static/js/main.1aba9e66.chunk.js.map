{"version":3,"sources":["components/Header.js","components/Sider.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","onClick","setCollapse","isCollapse","icon","src","Sider","trigger","collapsible","collapsedWidth","collapsed","Item","key","type","Content","Layout","Footer","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uNAmBeA,EAhBA,SAAAC,GACb,OACE,kBAAC,IAAOD,OAAR,CAAeE,UAAU,UACvB,kBAAC,IAAD,CACEC,QAAS,kBAAMF,EAAMG,aAAaH,EAAMI,aACxCH,UAAU,eACVI,KAAML,EAAMI,WAAa,cAAgB,cAE3C,yBAAKH,UAAU,QACb,gDACA,yBAAKK,IAAI,kE,iBCgBFC,EA1BD,SAAAP,GACZ,OACE,kBAAC,IAAOO,MAAR,CACEN,UAAU,QACVO,QAAS,KACTC,aAAW,EACXC,eAAgB,EAChBC,UAAWX,EAAMI,YAEjB,yBAAKH,UAAU,cACb,yBAAKK,IAAI,iEAEX,kBAAC,IAAD,KACE,kBAAC,IAAKM,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,KAAK,SACX,wCAEF,kBAAC,IAAKF,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,KAAK,SACX,2CChBFC,EAAoBC,IAApBD,QAASE,EAAWD,IAAXC,OAsBFC,EAlBH,WAAO,IAAD,EACkBC,oBAAS,GAD3B,mBACTf,EADS,KACGD,EADH,KAEhB,OACE,kBAAC,IAAD,CAAQF,UAAU,UAChB,kBAAC,EAAD,CAAOG,WAAYA,IACnB,kBAAC,IAAD,KACE,kBAAC,EAAD,CACEH,UAAU,SACVG,WAAYA,EACZD,YAAaA,IAEf,kBAACY,EAAD,CAASd,UAAU,YACnB,kBAACgB,EAAD,CAAQhB,UAAU,c,cCVNmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1aba9e66.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button, Layout, Menu } from 'antd'\r\n\r\nconst Header = props => {\r\n  return (\r\n    <Layout.Header className=\"header\">\r\n      <Button\r\n        onClick={() => props.setCollapse(!props.isCollapse)}\r\n        className=\"sider-toggle\"\r\n        icon={props.isCollapse ? 'menu-unfold' : 'menu-fold'}\r\n      ></Button>\r\n      <div className=\"logo\">\r\n        <h1>CLEAN THIS PLACE</h1>\r\n        <img src=\"https://img.icons8.com/cotton/64/000000/earth-care--v1.png\"></img>\r\n      </div>\r\n    </Layout.Header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { Layout, Menu, Icon } from 'antd'\r\n\r\nconst Sider = props => {\r\n  return (\r\n    <Layout.Sider\r\n      className=\"sider\"\r\n      trigger={null}\r\n      collapsible\r\n      collapsedWidth={0}\r\n      collapsed={props.isCollapse}\r\n    >\r\n      <div className=\"sider-logo\">\r\n        <img src=\"https://img.icons8.com/cotton/128/000000/earth-care--v1.png\"></img>\r\n      </div>\r\n      <Menu>\r\n        <Menu.Item key=\"1\">\r\n          <Icon type=\"user\" />\r\n          <span>nav 1</span>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"2\">\r\n          <Icon type=\"user\" />\r\n          <span>nav 1</span>\r\n        </Menu.Item>\r\n      </Menu>\r\n    </Layout.Sider>\r\n  )\r\n}\r\n\r\nexport default Sider\r\n","import React, { useState } from 'react'\r\nimport { Layout } from 'antd'\r\n\r\nimport Header from './components/Header'\r\nimport Sider from './components/Sider'\r\n\r\nconst { Content, Footer } = Layout\r\n\r\n// ALL JAVASCRIPT CODE\r\n\r\nconst App = () => {\r\n  const [isCollapse, setCollapse] = useState(true)\r\n  return (\r\n    <Layout className=\"layout\">\r\n      <Sider isCollapse={isCollapse}></Sider>\r\n      <Layout>\r\n        <Header\r\n          className=\"header\"\r\n          isCollapse={isCollapse}\r\n          setCollapse={setCollapse}\r\n        ></Header>\r\n        <Content className=\"content\"></Content>\r\n        <Footer className=\"footer\"></Footer>\r\n      </Layout>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\nimport 'antd/dist/antd.css'\nimport './assets/styles/index.scss'\n\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}